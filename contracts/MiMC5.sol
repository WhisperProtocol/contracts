// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MiMC5 {
    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint256[20] c = [
        0,
        106262679627446792860644620872897301495032408886813844782712310712997391606101,
        73201566681698188388241404230030386775072677319988320303720681369697770904180,
        74638840834287680525818790042503693370007270466543208515565003540972062679504,
        15425960272940474410298520676827796118472523554825748451103556143619989294281,
        115593910787467529414152910829332027515686002572056953712897795833253395266239,
        102412065810653655330412246880403400692466339355143032619438639715597861624282,
        53576843908714046135305948496464488226437263439063878894233966970750838357986,
        81821700766901542044368814036596595122218562460411910575783359667444035583457,
        55592858588872784890109238521772008132687141992323999666390722550906603923857,
        21250941433015178764037653422230110315975765220530988713642769112527952519151,
        35964296393447642194857658255193880621893616032783729395586433324119721442480,
        38625246828464408144141002645562633653538971598782684627216592473265051793856,
        101533885174607343467657293043451563236708826217373427758431979034484221158434,
        39538552691290196224469487891263615642283744459441284529007833549694623193295,
        68674802119211778878527347217671538543137080006358786211076007955200922224383,
        17838551034177867663999418913720055231478390519315334796638909236038781227157,
        105956713148253065729596968151702617383774116256951845772676271076633329670337,
        111886197935536584517611722374161689274365788069165947050609594565611571221462,
        4716905275848912353419733019031718382337167232194230930600978804432453226043 
    ];

    function MiMC5Feistel(uint256 _iL, uint256 _iR, uint256 _k) internal view returns(uint256 oL, uint256 oR) {
        uint8 nRounds = 20;

        uint256 lastL = _iL;
        uint256 lastR = _iR;

        uint256 mask;
        uint256 mask2;
        uint256 mask4;
        uint256 temp;

        for(uint8 i = 0; i < nRounds; i++){
            mask = addmod(lastR, _k, p);
            mask = addmod(mask, c[i], p);
            mask2 = mulmod(mask, mask, p);
            mask4 = mulmod(mask2, mask2, p);
            mask = mulmod(mask4, mask, p);

            temp = lastR;
            lastR = addmod(lastL, mask, p);
            lastL = temp;
        }

        return (lastL, lastR);
    }
    function MiMC5Sponge(uint256[2] memory _ins, uint256 _k) external view returns(uint256 h) {
        uint256 lastR = 0;
        uint256 lastC = 0;

        for(uint8 i = 0; i < _ins.length; i++){
            lastR = addmod(lastR, _ins[i], p);
            (lastR, lastC) = MiMC5Feistel(lastR, lastC, _k);
        }

        h = lastR;
    }
}